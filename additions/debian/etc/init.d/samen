#!/bin/sh
### BEGIN INIT INFO
# Provides:          samen
# Required-Start:    $network $remote_fs 
# Required-Stop:     $network $remote_fs 
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Samen network manager
### END INIT INFO

# Author: Kai Uwe Jesussek <kajot@gmx.net>

PATH=/sbin:/bin:/usr/sbin:/usr/bin
DESC="Samen network manager" 
NAME=samen
PIDDIR=/var/run/

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	ps ax | grep wpa_supplicant | grep $INTERFACE | grep -v grep > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
		return 1
	fi
	ifconfig $INTERFACE up > /dev/null 2>&1
	wpa_supplicant -D$DRIVER -i$INTERFACE -c$CONFIG_FILE $EXTRA_ARGS -B > /dev/null 2>&1
	wpa_cli -i$INTERFACE -B -a /usr/local/sbin/samen-handler > /dev/null 2>&1
	if [ $? -gt 0 ]; then
		return 2
	fi
	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	kill `ps ax | grep wpa_supplicant | grep $INTERFACE | grep -v grep | awk '{print $1}'` > /dev/null 2>&1
	#killall wpa_supplicant > /dev/null 2>&1
	ifconfig $INTERFACE down > /dev/null 2>&1
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	return "$RETVAL"
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
       status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  #reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	#log_daemon_msg "Reloading $DESC" "$NAME"
	#do_reload
	#log_end_msg $?
	#;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
    [ -n "$DIETIME" ] && sleep $DIETIME
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
	  	# Failed to stop
		log_end_msg 1
		;;
	esac
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
