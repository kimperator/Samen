#!/bin/bash
#############################################
#              samen-shop
#
#      an easy to use shell script
#       for wireless configuration
#
# copyright by sylence, 2008
# http://sylence.cc/projects/wiremore/
# Extended for Samen Service by
#  Kai Uwe Jesussek, 2011
#
#############################################

######### CHANGE TO SUIT YOUR NEEDS ##########
#
PATH="/sbin:/usr/sbin:/usr/local/sbin:/bin:/usr/bin:/usr/local/bin"
WPA_SUPPLICANT_SOCKETDIR="/var/run/wpa_supplicant"
#
##############################################

VERSION="20080902-01"
TITLE="samen-shop $VERSION"
unset ERRORMSG TMPFILE IFACE SCAN_RESULTS NETWORK_ADDRESS NETWORK_ESSID NETWORK_CHANNEL NETWORK_QUALITY NETWORK_ENCRYPTION WPA_SUPPLICANT_TMPFILE
# NETWORK_*[1-*] - last scan results
# NETWORK_ENCRYPTION[*] = [OPN]|[WEP]|[WPA-PSK]
declare -i NETWORK_NR

######### Functions ##########
function superuser_check() {
	test `whoami` = "root" || { ERRORMSG="Error: This script requires superuser rights!"; return 1; }
}

function environment_set() {
# is 'whereis' program available?
	whereis >/dev/null 2>&1
	if [ "$?" != "127" ]; then
		# we use whereis to figure out the correct paths
		DIALOG=`whereis -b dialog | awk '{ print $2 }'`
		MKTEMP=`whereis -b mktemp | awk '{ print $2 }'`
		IWCONFIG=`whereis -b iwconfig | awk '{ print $2 }'`
		IFCONFIG=`whereis -b ifconfig | awk '{ print $2 }'`
		WPA_SUPPLICANT=`whereis -b wpa_supplicant | awk '{ print $2 }'`
		WPA_CLI=`whereis -b wpa_cli | awk '{ print $2 }'`
	fi
	# as an alternative we assume these programs exist
	test -z "$DIALOG" && DIALOG=dialog
	test -z "$MKTEMP" && MKTEMP=mktemp
	test -z "$IWCONFIG" && IWCONFIG=iwconfig
	test -z "$IFCONFIG" && IFCONFIG=ifconfig
	test -z "$WPA_SUPPLICANT" && WPA_SUPPLICANT=wpa_supplicant
	test -z "$WPA_CLI" && WPA_CLI=wpa_cli
	# execution checks
	for CMD in $DIALOG $MKTEMP $IWCONFIG $WPA_SUPPLICANT $WPA_CLI; do
		"$CMD" -h >/dev/null 2>&1
		test "$?" != "127" || { ERRORMSG="Error: Program '$CMD' not available!"; return 1; }
	done
	
	if [ -e "/etc/rc.d/samen" ]; then
		SAMEN_SERVICE="/etc/rc.d/samen"
	elif [ -e "/etc/init.d/samen" ]; then
		SAMEN_SERVICE="/etc/init.d/samen"
	else
		echo "couldn't find samen service script"
		exit 1
	fi	

	# create tempfile
	TMPFILE=`$MKTEMP -t samen-shop.XXXXXX`
}

function commandline_process() {
	# mandatory: first argument is an available wireless interface
	if [ $# -eq 1 ]; then
		IFACE="$1" 
	else
		IFACE=$(iwconfig 2>| /dev/null | grep "IEEE 802.11" | cut '-d ' -f1)
	fi
	interface_check "$IFACE" || return 1
}

function interface_check() {
	# check the given interface (wireless, mode...)
	local OUTPUT=`$IWCONFIG $1 2>&1`
	test -z "`echo $OUTPUT | sed -n '/No such device/p'`" || { ERRORMSG="Error: Interface '$1' doesn't exist!"; return 1; }
	test -z "`echo $OUTPUT | sed -n '/no wireless extensions/p'`" || { ERRORMSG="Error: '$1' is no wireless interface!"; return 1; }
	test "`echo $OUTPUT | sed 's/.*Mode:\([a-zA-Z]*\).*/\1/'`" = "Managed" || { ERRORMSG="Error: Interface $1 is not in Managed Mode."; return 1; } 
}	

function help_print() {
	echo samen-shop
	echo an easy to use shell script for configurate wpa_supplicant and samen
	echo -e "Usage:\tsamen-shop interface"
}

function mainmenu_show() {
	while true; do
		samen_service_alive
		if [ $? -eq 0 ]; then
			dialog --backtitle "$TITLE ($IFACE)" --title "Main Menu" --cancel-label "Quit" --menu "[UP] [DOWN] to move, [Enter] to select" 15 50 8 "Scan" "for networks" "Show" "connection status" "Add" "network (manual)" "Start" "Samen Service" "Save" "wpa_supplicant.conf" "Quit" "samen-shop" 2>$TMPFILE
		else
			dialog --backtitle "$TITLE ($IFACE)" --title "Main Menu" --cancel-label "Quit" --menu "[UP] [DOWN] to move, [Enter] to select" 15 50 8 "Scan" "for networks" "Show" "connection status" "Add" "network (manual)" "Kill" "Samen Service" "Save" "wpa_supplicant.conf" "Quit" "samen-shop" 2>$TMPFILE
		fi

		test "$?" = "0" || echo "Quit" >$TMPFILE
		case `cat $TMPFILE` in
			"Scan")
			networklist_show
			;;
			"Show")
			status_show
			;;
			"Add")
			network_add_show
			;;
			"Kill")
			samen_service_kill
			;;
			"Start")
			samen_service_start
			;;
			"Save")
			wpa_supplicant_save
			;;
			"Quit")
			cleanup
			;;
		esac
	done
}

function networklist_scan() {
	# returns 0/true on successfull scan (no results/error: 1)
	# reset old scan results
	dialog --backtitle "$TITLE ($IFACE)" --infobox "  Scanning..." 3 20
	unset NETWORK_ADDRESS NETWORK_ESSID NETWORK_CHANNEL NETWORK_QUALITY NETWORK_ENCRYPTION
	SCAN_RESULTS=`iwlist $IFACE scan 2>&1`
	# bring the interface up, if it's down
	if [ "`echo $SCAN_RESULTS | awk '$0 ~ /Network is down/'`" ]; then
		$IFCONFIG $IFACE up
		SCAN_RESULTS=`iwlist $IFACE scan 2>&1`
	fi
	NETWORK_NR=0
	# did we get any scan results?
	test "`echo $SCAN_RESULTS | awk '$0 ~ /Cell/'`" || return 1
	while read CELL; do
		NETWORK_NR=$NETWORK_NR+1
		NETWORK_ADDRESS[$NETWORK_NR]=`echo "$CELL" | sed -n 's/.*Address:[ ]*\([:0-9A-F]*\).*/\1/p'`
		NETWORK_ESSID[$NETWORK_NR]=`echo "$CELL" | sed -n 's/.*ESSID:"\(.*\)".*/\1/p'`
		test -z "${NETWORK_ESSID[$NETWORK_NR]}" && NETWORK_ESSID[$NETWORK_NR]="<hidden>"
		NETWORK_CHANNEL[$NETWORK_NR]=`echo "$CELL" | sed -n 's/.*Channel[ ]*\([0-9]*\).*/\1/p'`
		NETWORK_QUALITY[$NETWORK_NR]=`echo "$CELL" | sed -n 's/.*Quality=\([0-9]*\)\/.*/\1/p'`
		NETWORK_ENCRYPTION[$NETWORK_NR]=`echo "$CELL" | sed -n 's/.*Encryption key:[ ]*\([a-zA-Z]*\).*/\1/p'`
		if [ ${NETWORK_ENCRYPTION[$NETWORK_NR]} = "on" ]; then
			NETWORK_ENCRYPTION[$NETWORK_NR]=`echo "$CELL" | awk '
			BEGIN { ORS=""; enc=""; x=1 };
			{ while (x <= NF) {
				if ($x == "WPA") { print "[WPA-" }
				if ($x ~ /WPA2/) { print "[WPA2-" }
				#if ($x ~ /TKIP/) { print "TKIP-" }
				#if ($x ~ /CCMP/) { print "CCMP-" }
				if ($x ~ /PSK/) { print "PSK] "}
				if ($x ~ /802.1x/) { print "EAP] "}
				x=x+1
			}
		}
		END  { print "\n" }'`
		test -z "${NETWORK_ENCRYPTION[$NETWORK_NR]}" && NETWORK_ENCRYPTION[$NETWORK_NR]="[WEP]"
	else
		NETWORK_ENCRYPTION[$NETWORK_NR]="[OPN]"
	fi
		done <<< "`echo "$SCAN_RESULTS" | awk 'BEGIN { ORS=""; cell=0 }; $2 > 1 && $1 == "Cell" { print "\n" }; $1 == "Cell" { cell=$2; gsub(/^[ ]+/,"") }; cell != 0 { gsub(/[ ]+/," "); print }; END { print "\n"}'`"
}

function networklist_show() {
	networklist_scan
	while true; do
	unset NETWORKS
	while [ "$NETWORK_NR" -gt 0 ]; do
		NETWORKS="$NETWORKS `printf '\"%s\" \"%3s %16s %2s %s\"' "${NETWORK_ESSID[$NETWORK_NR]}" ${NETWORK_QUALITY[$NETWORK_NR]} ${NETWORK_ADDRESS[$NETWORK_NR]} ${NETWORK_CHANNEL[$NETWORK_NR]} "${NETWORK_ENCRYPTION[$NETWORK_NR]}"`"
		NETWORK_NR=$NETWORK_NR-1
	done
	eval "dialog --backtitle \"$TITLE ($IFACE)\" --title \"Scan Results (${#NETWORK_ESSID[*]})\" --cancel-label "Back" --ok-label "Connect" --menu \"[UP] [DOWN] to move, [Enter] to select\" 25 100 25 \"--- Rescan ---\" \"`printf '%3s %-17s %2s %s' QUA BSSID CH ENCRYPTION`\" $NETWORKS 2>$TMPFILE"
	test "$?" = "0" || echo "Abort" >$TMPFILE
	case `cat $TMPFILE` in
		"--- Rescan ---")
			networklist_show
			;;
		"Abort")
			return 0
			;;
		*)
			for I in `seq 1 ${#NETWORK_ESSID[*]}`; do
				if [ "${NETWORK_ESSID[$I]}" = "`cat $TMPFILE`" ]; then
				# TODO network_connect returns 0 or 1 -> do something?
					network_connect "${NETWORK_ESSID[$I]}" "${NETWORK_ENCRYPTION[$I]}"
					break
				fi
			done
			return 0
			;;
	esac
	done
}

function network_connect() {
	# $1 - ESSID
	# $2 - ENCRYPTION ([OPN]|[WEP]|[WPA-PSK]|[WPA-EAP])
	# $3 - KEY (optional)
	# received ESSID and ENCRYPTION as argument, did we?
	test -z "$1" -o -z "$2" && { ERRORMSG="Error: No ESSID or ENCRPYTION passed to network_connect()!"; return 1; }
	KEY=$3
	local NETWORK_ID
	test "$?" = "2" && { dialog --backtitle "$TITLE ($IFACE)" --msgbox "More than one instance of wpa_supplicant is running. Use the "kill" option in the main menu to terminate some of them."; return 1; }
	if [ "$?" = "0" ]; then WPA_SUPPLICANT_AVAIL="yes"; else WPA_SUPPLICANT_AVAIL=; fi
	# filter for encryption type
	case "`echo "$2" | awk '{ if ($0 ~ /WPA/) { print "[WPA]" } else { print } }'`" in
		"[OPN]")
			wpa_supplicant_networkid_get "$1"
			$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID ssid "\"$1\"" >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID key_mgmt NONE >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS select_network $NETWORK_ID >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS reassociate >/dev/null 2>&1
			return 0
			;;
		"[WEP]")
			# first request a key
			if [ -z "$KEY" ]; then
				dialog --backtitle "$TITLE ($IFACE)" --title "WEP key for $1" --inputbox "Please enter the appropriate WEP hex key for $1" 10 100 2>$TMPFILE
				KEY=`cat $TMPFILE`
			fi
			while [ `echo $KEY | awk '{ print length }'` -ne 10 -a `echo $KEY | awk '{ print length }'` -ne 26 -a `echo $KEY | awk '{ print length }'` -ne 58 ]; do
				dialog --backtitle "$TITLE ($IFACE)" --title "Error" --msgbox "`echo $KEY | awk '{ print length }'` digits entered,\nbut hex key length has to be 10 (64 bit WEP), 26 (128 bit WEP) or 58 (256 bit WEP) digits." 8 60
				dialog --backtitle "$TITLE ($IFACE)" --title "WEP key for $1" --inputbox "Please enter the appropriate WEP hex key for $1" 10 100 "$KEY" 2>$TMPFILE
				test "$?" = "0" || return 1
				# teporary variable to minimize disk usage (I know about caches, but I don't care)
				KEY=`cat $TMPFILE`
			done
			dialog --backtitle "$TITLE ($IFACE)" --infobox "  Connecting" 3 20
			wpa_supplicant_networkid_get "$1"
			$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID ssid "\"$1\"" >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID key_mgmt NONE >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID wep_key0 $KEY >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID wep_tx_keyidx 0 >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS select_network $NETWORK_ID >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS reassociate >/dev/null 2>&1
			return 0
			;;
		"[WPA]")
			# first request a key
			# TODO empty WPA keys possible?
			while [ -z "$KEY" ]; do
				dialog --backtitle "$TITLE ($IFACE)" --title "WPA key for $1" --inputbox "Please enter the appropriate WPA passphrase for $1" 10 100 2>$TMPFILE
				test "$?" = "0" || return 1
				KEY=`cat $TMPFILE`
			done
			dialog --backtitle "$TITLE ($IFACE)" --infobox "  Connecting" 3 20
			WPA_CLI_OPTS="-i $IFACE -p $WPA_SUPPLICANT_SOCKETDIR"
			# finally initiate connection
			wpa_supplicant_networkid_get "$1"
			$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID ssid "\"$1\"" >/dev/null 2>&1
			if [ "`echo "$2" | grep EAP`" ]; then
				$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID key_mgmt WPA-EAP >/dev/null 2>&1
			else # assume WPA-PSK
				$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID key_mgmt WPA-PSK >/dev/null 2>&1
			fi
			$WPA_CLI $WPA_CLI_OPTS set_network $NETWORK_ID psk "\"`cat $TMPFILE`\"" >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS select_network $NETWORK_ID >/dev/null 2>&1
			$WPA_CLI $WPA_CLI_OPTS reassociate >/dev/null 2>&1
			return 0
			;;
	esac
	return 1
}

function wpa_supplicant_save() {
	dialog --backtitle "$TITLE ($IFACE)" --infobox "  Saving..." 3 20
	$WPA_CLI $WPA_CLI_OPTS save_config >/dev/null 2>&1
	if [ "$?" == "0" ]; then
		return 0
	fi
	dialog --backtitle "$TITLE ($IFACE)" --title "Error" --msgbox "Error: Could not save wpa_supplicant config" 5 47
	return 1
}

function wpa_supplicant_networkid_get() {
	# receives the ESSID to connect to as parameter
	# if wpa_cli lists a network id with the same ESSID, we will use it
	# writes to $NETWORK_ID
	# TODO use return values per echo?
	TMP=`$WPA_CLI $WPA_CLI_OPTS list_networks | awk '$1 ~ /[[:digit:]]+/ { print }'`
	TMP=`echo "$TMP" | awk '{ print $1, $2 }' | grep "$1" | tail -1`
	if [ "$TMP" ]; then
		# hit - network id with specified ESSID exists
		NETWORK_ID=`echo "$TMP" | awk '{ print $1 }'`
	else
		# new entry
		NETWORK_ID=`$WPA_CLI $WPA_CLI_OPTS add_network | tail -1`
	fi
}

function samen_service_kill() {
	# kills already running samen daemon
	samen_service_alive
	if [ $? -eq 1 ]; then
		dialog --backtitle "$TITLE ($IFACE)" --infobox "  Stopping Samen Service" 3 20
		$SAMEN_SERVICE stop > /dev/null
		sleep 5
	fi
}

function samen_service_start() {
	# (re)starts samen service daemon
	samen_service_kill
	dialog --backtitle "$TITLE ($IFACE)" --infobox "  Starting Samen Service" 3 20
	$SAMEN_SERVICE start > /dev/null
	sleep 5
}

function samen_service_alive() {
	ps ax | grep samen-handler | grep $IFACE | grep -v grep > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		return 1
	else
		return 0
	fi
}

function status_get() {
	# set some status variables
	# reset old ones
	unset STATUS_INTERFACE STATUS_BSSID STATUS_ESSID STATUS_ENCRYPTION STATUS_WPA_SUPPLICANT STATUS_WPA_STATE STATUS_WPA_GROUP_CIPHER STATUS_WPA_PAIRWISE_CIPHER 
	STATUS_INTERFACE=$IFACE
	# we can use wpa_cli to obtain information
	TMP=`$WPA_CLI $WPA_CLI_OPTS status 2>&1`
	STATUS_BSSID=`echo $TMP | sed -n 's/.*bssid=\([^ ]*\).*/\1/p'`
	STATUS_ESSID=`echo $TMP | sed -n 's/.*ssid=\([^ ]*\).*/\1/p'`
	STATUS_WPA_STATE=`echo $TMP | sed -n 's/.*wpa_state=\([^ ]*\).*/\1/p'`
	STATUS_WPA_GROUP_CIPHER=`echo $TMP | sed -n 's/.*group_cipher=\([^ ]*\).*/\1/p'`
	STATUS_WPA_PAIRWISE_CIPHER=`echo $TMP | sed -n 's/.*pairwise_cipher=\([^ ]*\).*/\1/p'`
	STATUS_ENCRYPTION=`echo $TMP | sed -n 's/.*key_mgmt=\([^ ]*\).*/\1/p'`
	if [ "`echo $TMP | sed -n 's/.*key_mgmt=\([^ ]*\).*/\1/p'`" = "NONE" ]; then
		if [ "$STATUS_WPA_GROUP_CIPHER" ]; then
			STATUS_ENCRYPTION="WEP"
		else
			STATUS_ENCRYPTION="OPN"
		fi
	fi
}

function status_show() {
	status_get
	dialog --backtitle "$TITLE ($IFACE)" --title "Connection status" --msgbox " Interface: $STATUS_INTERFACE\n BSSID: $STATUS_BSSID\n ESSID: $STATUS_ESSID\n Encryption: $STATUS_ENCRYPTION\n State: $STATUS_WPA_STATE\n Group Cipher: $STATUS_WPA_GROUP_CIPHER\n Pairwise Cipher: $STATUS_WPA_PAIRWISE_CIPHER" 13 40
}
		
function network_add_show() {
	dialog --backtitle "$TITLE ($IFACE)" --menu "Choose encryption type!" 20 30 15 "OPEN" "" "WEP" "" "WPA[2]-PSK" "" 2>$TMPFILE
	case "`cat $TMPFILE`" in
		"OPEN")
			dialog --backtitle "$TITLE ($IFACE)" --title "Add network (OPEN)" --form "Input connection data" 8 100 1 "ESSID" 0 0 "" 0 10 40 40 2>$TMPFILE
			ESSID="`cat $TMPFILE | head -1`"
			network_connect "$ESSID" "[OPN]"
			;;
		"WEP")
			dialog --backtitle "$TITLE ($IFACE)" --title "Add network (WEP)" --form "Input connection data" 10 100 3 "ESSID" 0 0 "" 0 10 40 40 "Key" 3 0 "" 3 10 80 128 2>$TMPFILE
			ESSID="`cat $TMPFILE | head -1`"
			KEY="`cat $TMPFILE | tail -1`"
			network_connect "$ESSID" "[WEP]" "$KEY"
			;;
		"WPA[2]-PSK")
			dialog --backtitle "$TITLE ($IFACE)" --title "Add network (WPA[2]-PSK)" --form "Input connection data" 10 100 3 "ESSID" 0 0 "" 0 10 40 40 "Key" 3 0 "" 3 10 80 128 2>$TMPFILE
			ESSID="`cat $TMPFILE | head -1`"
			KEY="`cat $TMPFILE | tail -1`"
			network_connect "$ESSID" "[WPA-PSK]" "$KEY"
			;;
		#"WPA[2]-EAP")
			## TODO
			#dialog --backtitle "$TITLE ($IFACE)" --title "Add network (WPA[2]-EAP)" --form "Input connection data" 10 100 3 "ESSID" 0 0 "" 0 10 40 40 "Key" 3 0 "" 3 10 80 128 2>$TMPFILE
			#ESSID="`cat $TMPFILE | head -1`"
			#KEY="`cat $TMPFILE | tail -1`"
			#network_connect "$ESSID" "[WPA-EAP]" "$KEY"
			#;;
		esac
}

function cleanup() {
	clear
	test -z "$TMPFILE" || rm $TMPFILE
	if [ -z "$ERRORMSG" ]; then
		exit 0
	else
		echo $ERRORMSG >&2
		exit 1
	fi
}

######### Initialization ##########
superuser_check || cleanup
environment_set || cleanup
commandline_process $1 || cleanup
mainmenu_show
